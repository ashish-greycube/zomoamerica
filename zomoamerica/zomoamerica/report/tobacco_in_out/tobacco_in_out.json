{
 "add_total_row": 0,
 "creation": "2019-10-23 09:45:15.658870",
 "disable_prepared_report": 0,
 "disabled": 0,
 "docstatus": 0,
 "doctype": "Report",
 "idx": 0,
 "is_standard": "Yes",
 "letter_head": "ZA - Standard NO TAX",
 "modified": "2020-11-25 06:29:04.388678",
 "modified_by": "Administrator",
 "module": "ZomoAmerica",
 "name": "Tobacco In Out",
 "owner": "Administrator",
 "prepared_report": 0,
 "query": "SELECT round(coalesce(max(OpeningBalance),0)*2.20462,2) AS \"OpeningBalance:Data:150\",\n\t\tround(coalesce(max(Purchase),0)*2.20462,2)as \"Purchase/In:Data:120\",\n\t\tround(coalesce(max(Sales),0)*2.20462,2) as \"Sales/Out:Data:120\",\n\t\tround(coalesce(max(ClosingBalance),0)*2.20462,2) as \"ClosingBalance:Data:150\",\n\t\tround(coalesce((max(OpeningBalance) + max(Purchase) -max(Sales) - max(ClosingBalance)),0)*2.20462,2) as \"Discripancy:Data:120\"\nfrom(\nwith fn as\n(\n\tselect sle.posting_date, sle.posting_time, sle.item_code, sle.qty_after_transaction\n\t, row_number() over (PARTITION by item_code, warehouse order by posting_date desc, posting_time desc) rn\n\tfrom `tabStock Ledger Entry` as sle\n\tINNER JOIN `tabItem` AS TI \n\ton sle.item_code = TI.item_code\n\tand TI.item_group in (select distinct name from `tabItem Group` where parent_item_group = 'TOBACCO')\n\twhere posting_date < '2020-10-01'\n\tand warehouse = (select value from tabSingles where doctype = 'Stock Settings' and field='default_warehouse')\n), \ncb as\n(\n\tselect sle.posting_date, sle.posting_time, sle.item_code, sle.qty_after_transaction\n\t, row_number() over (PARTITION by item_code, warehouse order by posting_date desc, posting_time desc) rn\n\tfrom `tabStock Ledger Entry` as sle\n\tINNER JOIN `tabItem` AS TI \n\ton sle.item_code = TI.item_code\n\tand TI.item_group in (select distinct name from `tabItem Group` where parent_item_group = 'TOBACCO')\n\twhere posting_date <= '2020-10-31'\n\tand warehouse = (select value from tabSingles where doctype = 'Stock Settings' and field='default_warehouse')\n)\nselect \nsum(fn.qty_after_transaction * it.weight_per_unit) AS OpeningBalance,\n0 AS Purchase,\n0 AS Sales,\n0 AS ClosingBalance\nfrom fn\ninner join tabItem it on it.item_code = fn.item_code\nwhere rn = 1\t\t\nUNION ALL \nselect \n0 as OpeningBalance,\n(MAX(PRW)+ MAX(BONDEDTONJ))as \"Purchase/In\",\n0 as Sales,\n0 as ClosingBalance\nfrom\n\t(SELECT \n\tcoalesce(sum(round(coalesce(item.total_weight,0),2)),0) as PRW,\n\t\t0 AS BONDEDTONJ\n\tfrom `tabPurchase Receipt` si\n\tleft outer join (SELECT sum(total_weight)as total_weight, parent from (select CASE weight_uom\n\t\t\t\t\t\tWHEN 'Gram' then sum(total_weight/1000)\n\t\t\t\t\t\tELSE sum(total_weight)\n\t\t\t\t\t\tEND as total_weight,\n\t\t\t\t\t\tparent from `tabPurchase Receipt Item` \n\t\t\t\t\t\twhere item_group in (select distinct name from `tabItem Group` where parent_item_group = 'TOBACCO') group by parent,weight_uom) as t group by parent) item on item.parent=si.name\nWHERE si.docstatus=1  \nand si.name in (select distinct parent from `tabPurchase Receipt Item` where item_group in \n(select distinct name from `tabItem Group` where parent_item_group = 'TOBACCO'))\nAND si.posting_date >=%(from_date)s and si.posting_date <=%(to_date)s\nUNION ALL\nselect \n0 as PRW,\nsum(round(coalesce(item.total_weight,0),2)) as BONDEDTONJ \nfrom `tabStock Entry` si\nleft outer join (SELECT sum(total_weight)as total_weight, parent from (select CASE i.weight_uom\n\t\t\t\t\t\tWHEN 'Gram' then sum(i.weight_per_unit * sed.qty/1000)\n\t\t\t\t\t\tELSE sum(i.weight_per_unit * sed.qty)\n\t\t\t\t\t\tEND as total_weight,\n\t\t\t\t\t\tsed.parent from `tabStock Entry Detail` as sed \n\t\t\t\t\t\tinner join tabItem as i\n\t\t\t\t\t\ton i.item_code = sed.item_code\n\t\t\t\t\t\tand sed.t_warehouse in (select value from tabSingles where doctype = 'Stock Settings' and field='default_warehouse')\n\t\t\t\t\t\tand sed.item_group in \n\t\t\t\t\t\t(select distinct name from `tabItem Group` where parent_item_group = 'TOBACCO') group by parent,weight_uom) as t group by parent) item on item.parent=si.name\nWHERE si.docstatus=1 \nand si.name in (select distinct parent from `tabStock Entry Detail` where item_group in \n(select distinct name from `tabItem Group` where parent_item_group = 'TOBACCO'))\nAND si.posting_date >=%(from_date)s and si.posting_date <=%(to_date)s\nand si.purpose in  ('Material Transfer','Material Receipt','Repack') ) as PurchaseIN\nUNION ALL\nselect \n0 as OpeningBalance,\n0 as Purchase,\n(MAX(Sales)+ MAX(delivery)+ MAX(transfer))as \"Sales/Out\",\n0 as ClosingBalance\nFROM\n( select  -- SALES INVOICE\nsum(round(coalesce(item.total_weight,0),2)) as Sales,\n0 as delivery,\n0 as transfer\nfrom `tabSales Invoice` si\nleft outer join (SELECT sum(total_weight)as total_weight, parent from (select CASE weight_uom\n\t\t\t\t\t\tWHEN 'Gram' then sum(total_weight/1000)\n\t\t\t\t\t\tELSE sum(total_weight)\n\t\t\t\t\t\tEND as total_weight,\n\t\t\t\t\t\tparent from `tabSales Invoice Item` \n\t\t\t\t\t\twhere warehouse in (select value from tabSingles where doctype = 'Stock Settings' and field='default_warehouse')\n\t\t\t\t\t\tand item_group in (select distinct name from `tabItem Group` where parent_item_group = 'TOBACCO') group by parent,weight_uom) as t group by parent) item on item.parent=si.name\nWHERE si.docstatus=1 and si.update_stock = 1\nand si.name in (select distinct parent from `tabSales Invoice Item` where item_group in \n(select distinct name from `tabItem Group` where parent_item_group = 'TOBACCO'))\nAND si.posting_date >=%(from_date)s and si.posting_date <=%(to_date)s\nUNION ALL -- DELIVERY NOTE\nselect \n0 as Sales,\n sum(round(coalesce(item.total_weight,0),2)) as Delivery,\n 0 as transfer\nfrom `tabDelivery Note` si\nleft outer join (SELECT sum(total_weight)as total_weight, parent from (select CASE weight_uom\n\t\t\t\t\t\tWHEN 'Gram' then sum(total_weight/1000)\n\t\t\t\t\t\tELSE sum(total_weight)\n\t\t\t\t\t\tEND as total_weight,\n\t\t\t\t\t\tparent from `tabDelivery Note Item` \n\t\t\t\t\t\twhere warehouse in (select value from tabSingles where doctype = 'Stock Settings' and field='default_warehouse')\n\t\t\t\t\t\tand item_group in (select distinct name from `tabItem Group` where parent_item_group = 'TOBACCO') group by parent,weight_uom) as t group by parent) item on item.parent=si.name\nWHERE si.docstatus=1 \nand si.name in (select distinct parent from `tabDelivery Note Item` where item_group in \n(select distinct name from `tabItem Group` where parent_item_group = 'TOBACCO'))\nAND si.posting_date >=%(from_date)s and si.posting_date <=%(to_date)s\nUNION ALL -- Transfer Out\nselect \n0 as Sales,\n0 as delivery,\n sum(round(coalesce(item.total_weight,0),2)) as transfer\nfrom `tabStock Entry` si\nleft outer join (SELECT sum(total_weight)as total_weight, parent from (select CASE i.weight_uom\n\t\t\t\t\t\tWHEN 'Gram' then sum(i.weight_per_unit * sed.qty/1000)\n\t\t\t\t\t\tELSE sum(i.weight_per_unit * sed.qty)\n\t\t\t\t\t\tEND as total_weight,\n\t\t\t\t\t\tsed.parent from `tabStock Entry Detail` as sed \n\t\t\t\t\t\tinner join tabItem as i\n\t\t\t\t\t\ton i.item_code = sed.item_code\n\t\t\t\t\t\tand sed.s_warehouse in (select value from tabSingles where doctype = 'Stock Settings' and field='default_warehouse')\n\t\t\t\t\t\tand sed.item_group in \n\t\t\t\t\t\t(select distinct name from `tabItem Group` where parent_item_group = 'TOBACCO') group by parent,weight_uom) as t group by parent) item on item.parent=si.name\nWHERE si.docstatus=1 \nand si.name in (select distinct parent from `tabStock Entry Detail` where item_group in \n(select distinct name from `tabItem Group` where parent_item_group = 'TOBACCO'))\nAND si.posting_date >=%(from_date)s and si.posting_date <=%(to_date)s\nand si.purpose in  ('Material Transfer','Material Issue','Repack'))  as D\nUNION ALL\nselect \n0 AS OpeningBalance,\n0 AS Purchase,\n0 AS Sales,\nsum(cb.qty_after_transaction * it.weight_per_unit)  AS ClosingBalance\nfrom cb\ninner join tabItem it on it.item_code = cb.item_code\nwhere rn = 1 ) as finaloutput",
 "ref_doctype": "Stock Ledger Entry",
 "report_name": "Tobacco In Out",
 "report_type": "Query Report",
 "roles": [
  {
   "role": "Stock User"
  },
  {
   "role": "Accounts Manager"
  }
 ]
}